{
  "?xml": {
    "@_version": "1.0",
    "@_encoding": "UTF-8"
  },
  "rss": {
    "channel": {
      "title": {
        "#text": "Bram.us"
      },
      "atom:link": {
        "@_href": "https://www.bram.us/feed/",
        "@_rel": "self",
        "@_type": "application/rss+xml"
      },
      "link": {
        "#text": "https://www.bram.us"
      },
      "description": {
        "#text": "A rather geeky/technical weblog, est. 2001, by Bramus"
      },
      "lastBuildDate": {
        "#text": "Wed, 02 Jul 2025 14:35:18 +0000"
      },
      "language": {
        "#text": "en-US"
      },
      "sy:updatePeriod": {
        "#text": "hourly"
      },
      "sy:updateFrequency": {
        "#text": 1
      },
      "generator": {
        "#text": "https://wordpress.org/?v=6.8.2"
      },
      "item": [
        {
          "title": {
            "#text": "Cranking View Transtions up to 11 (Safely, Maybe) (2025.06.12 ‚Äì Middlesbrough Front End)"
          },
          "link": {
            "#text": "https://www.bram.us/2025/06/19/cranking-view-transtions-up-to-11-safely-maybe-2025-06-12-middlesbrough-front-end/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/06/19/cranking-view-transtions-up-to-11-safely-maybe-2025-06-12-middlesbrough-front-end/#respond"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Thu, 19 Jun 2025 20:48:12 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "public speaking"
            },
            {
              "#text": "view transitions"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35674",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "At Middlesbrough Front End 2025 I gave a talk about some of the more exotic applications of View Transitions"
          },
          "content:encoded": {
            "#text": "<p><figure><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge.jpeg\"><img fetchpriority=\"high\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge.jpeg\" alt=\"\" width=\"560\" height=\"373\" class=\"alignnone size-medium wp-image-35681\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge.jpeg 1600w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge-560x373.jpeg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge-1120x747.jpeg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge-768x512.jpeg 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge-1536x1024.jpeg 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/3eedb6a3ae38d0cfe96567a424d95ff8-xxlarge-1568x1046.jpeg 1568w\" sizes=\"(max-width: 560px) 100vw, 560px\" /></a><figcaption>Me on stage. Photo by <a href=\"https://petelambert.pixieset.com/mfe2025/\">Pete Lambert</a></figcaption></figure>\n</p>\n<div class=\"intro\">\n<p>Last week I was in Middlesbrough to speak at Middlesbrough Front End. At the event I gave a talk about some of the more exotic applications of View Transitions.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#the-talk\">The Talk</a></li>\n<li><a href=\"#slides\">Slides</a></li>\n<li><a href=\"#recording\">Recording/Video</a></li>\n<li><a href=\"#thanks\">Thanks!</a></li>\n</ul>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-talk\" name=\"the-talk\">#</a> The Talk</h3>\n<p>This talk was a remix of my <a href=\"https://www.bram.us/2024/04/29/if-view-transitions-and-scroll-driven-animations-had-a-baby-css-cafe/\">Scroll-Driven View Transitions</a> talk and also included some of the recent View Transitions experiments I have covered here on my blog before:</p>\n<blockquote>\n<p>Ever wondered what happens when you push the View Transition API beyond its documented limits? This talk throws caution to the wind and explores the wild side of View Transitions, cranking them up to 11. We&#8217;ll combine them with Scroll-Driven Animations, trigger them automatically with MutationObserver, and even resurrect classic Internet Explorer‚Äôs Page Transitions using this modern API. Prepare for unconventional use cases, unexpected results, and a healthy dose of experimentation as we venture beyond the spec. If you&#8217;re a web developer who loves to tinker and push boundaries, this is the talk for you.</p>\n</blockquote>\n<p>I didn‚Äôt cover everything from the deck during the talk because I knew I had more material than what could fit in the 30 minute slot. This was perfectly fine, as I had prepared for skipping some stuff.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#slides\" name=\"slides\">#</a> Slides</h3>\n<p>The slides of my talk are <a href=\"https://slidr.io/bramus/cranking-view-transtions-up-to-11-safely-maybe-2025-06-12-nil-mfe25\">up on slidr.io</a> are embedded below:</p>\n<p><iframe allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" allowtransparency=\"true\" frameborder=\"0\" id=\"slidrio-deck-3236\" src=\"https://slidr.io/bramus/cranking-view-transtions-up-to-11-safely-maybe-2025-06-12-nil-mfe25?embed=true\" style=\"border:0; padding:0; margin:0; background:transparent;\" width=\"560\" height=\"490\"><a href=\"https://slidr.io/bramus/cranking-view-transtions-up-to-11-safely-maybe-2025-06-12-nil-mfe25#1\" title=\"Cranking View Transtions up to 11 (Safely, Maybe) (2025.06.12 ‚Äì MFE25)\">Watch the slides</a></iframe></p>\n<p>My deck is riddled with videos and animations, but because this is a PDF export these are not included in the embed above.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#recording\" name=\"recording\">#</a> Recording/Video</h3>\n<p>This talk was unfortunately not recorded.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#thanks\" name=\"thanks\">#</a> Thanks!</h3>\n<p>Thanks to organizers Lewis, Jamie, and James for inviting me to come speak at this year‚Äôs edition of Middlesbrough Front End. I knew the conference through <a href=\"https://jakearchibald.com/\">Jake</a>, <a href=\"https://csswizardry.com/\">Harry</a>, and <a href=\"https://utilitybend.com/\">Brecht</a> (who all spoke there at previous editions), and now I understand why they were so excited about it. The MFE team sure knows how to organize a conference and put together a nicely balanced schedule. A pity MFE no longer can rely on the digital leg of the town Middlesbrough for their event, but they did well by booking <a href=\"https://en.wikipedia.org/wiki/Riverside_Stadium\">the Riverside Stadium</a> as their new location.</p>\n<p><figure><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/06/d0506f8117d9ef0309f4beb05328cbf3-xlarge.jpeg\"><img decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/06/d0506f8117d9ef0309f4beb05328cbf3-xlarge.jpeg\" alt=\"\" width=\"373\" height=\"560\" class=\"alignnone size-medium wp-image-35682\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/06/d0506f8117d9ef0309f4beb05328cbf3-xlarge.jpeg 1024w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/d0506f8117d9ef0309f4beb05328cbf3-xlarge-373x560.jpeg 373w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/d0506f8117d9ef0309f4beb05328cbf3-xlarge-747x1120.jpeg 747w, https://www.bram.us/wordpress/wp-content/uploads/2025/06/d0506f8117d9ef0309f4beb05328cbf3-xlarge-768x1152.jpeg 768w\" sizes=\"(max-width: 373px) 100vw, 373px\" /></a><figcaption>Me and <a href=\"https://jakearchibald.com/\">Jake</a> (and <a href=\"https://ohhelloana.blog/\">Ana</a> and <a href=\"https://csswizardry.com/\">Harry</a>). Photo by <a href=\"https://petelambert.pixieset.com/mfe2025/\">Pete Lambert</a></figcaption></figure>\n</p>\n<p>Added bonus to speaking at MFE25 was that I also got to see <a href=\"https://jakearchibald.com/\">Jake</a> in person again. We chat and see each other on the screen from time to time ever since he left Google back in 2023, yet nothing can match meeting each other in person üôÇ</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\"><p>üíÅ‚Äç‚ôÇÔ∏è If you are a conference or meetup organiser, don't hesitate to <a href=\"https://www.bram.us/speaking-training/\">contact me to come speak at your event</a>.</p></div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/06/19/cranking-view-transtions-up-to-11-safely-maybe-2025-06-12-middlesbrough-front-end/feed/"
          },
          "slash:comments": {
            "#text": 0
          }
        },
        {
          "title": {
            "#text": "Scroll-Driven Animations with CSS (2025.05.30 @ JSHeroes)"
          },
          "link": {
            "#text": "https://www.bram.us/2025/05/31/scroll-driven-animations-with-css-jsheroes/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/05/31/scroll-driven-animations-with-css-jsheroes/#respond"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Sat, 31 May 2025 20:00:57 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "public speaking"
            },
            {
              "#text": "scroll-driven animations"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35654",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "At JSHeroes 2025 I gave a talk on Scroll-Driven Animations."
          },
          "content:encoded": {
            "#text": "<p><figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/PXL_20250530_095503121.jpg\" alt=\"\" width=\"560\" height=\"315\" class=\"alignnone size-medium wp-image-35662\" /><figcaption>Me on stage showing the <a href=\"https://scroll-driven-animations.style/tools/view-timeline/ranges/\">View Timeline Ranges Visualizer</a>.<br />Photo by <a href=\"https://www.nicoespeon.com/\">Nicolas Carlo</a></figcaption></figure>\n</p>\n<div class=\"intro\">\n<p>I‚Äôm currently in (the airport of) Cluj-Napoca (Romania) on my way back home from speaking <a href=\"https://jsheroes.io/\">JSHeroes</a>. At the event, I gave a talk on Scroll-Driven Animations with CSS.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#the-talk\">The Talk</a></li>\n<li><a href=\"#slides\">Slides</a></li>\n<li><a href=\"#recording\">Recording/Video</a></li>\n<li><a href=\"#thanks\">Thanks!</a></li>\n</ul>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-talk\" name=\"the-talk\">#</a> The Talk</h3>\n<p>The talk I gave is a full-length talk of a little over 30 minutes.</p>\n<blockquote>\n<p>A new addition to CSS are ‚ÄúScroll-Driven Animations‚Äù. With it, you can link animations to the scroll offset of a scroll container using only CSS ‚Äî no JavaScript needed! In this demo-heavy presentation, we‚Äôll dig into what this spec has to offer and dissect some of its demos (such as a working Cover Flow implementation) + use-cases.</p>\n</blockquote>\n<p>The talk was a slightly updated version of <a href=\"https://www.bram.us/2024/05/30/scroll-driven-animations-with-css-webexpo/\">the one I gave at WebExpo last year</a>.</p>\n<p>I also participated in a panel with <a href=\"https://www.miriamsuzanne.com/\">Miriam Suzanne</a>, <a href=\"https://hidde.blog/\">Hidde de Vries</a>, and <a href=\"https://x.com/DanShappir\">Dan Shappir</a> on Standards, moderated by JSHeroes co-organiser <a href=\"https://alexmoldovan.dev/\">Alex Moldovan</a></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#slides\" name=\"slides\">#</a> Slides</h3>\n<p>The slides of my talk are <a href=\"https://slidr.io/bramus/scroll-driven-animations-with-css-2025-05-30-jsheroes\">up on slidr.io</a> are embedded below:</p>\n<p><iframe loading=\"lazy\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" allowtransparency=\"true\" frameborder=\"0\" id=\"slidrio-deck-3171\" src=\"https://slidr.io/bramus/scroll-driven-animations-with-css-2025-05-30-jsheroes?embed=true\" style=\"border:0; padding:0; margin:0; background:transparent;\" width=\"560\" height=\"490\"><a href=\"https://slidr.io/bramus/scroll-driven-animations-with-css-2025-05-30-jsheroes#1\" title=\"Scroll-Driven Animations with CSS (2025.05.30 @ JSHeroes)\">Watch the slides</a></iframe></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#recording\" name=\"recording\">#</a> Recording/Video</h3>\n<p>The talk was recorded and will be published to <a href=\"https://www.youtube.com/@JSHeroes\">their YouTube channel</a> soon. I will update this post once the video is published.</p>\n<p>Graphic artist Oana ZƒÉule»õ also made a sketchnote of the presentation, which you can see here:</p>\n<p><figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6863.jpeg\" alt=\"\" width=\"560\" height=\"420\" class=\"alignnone size-medium wp-image-35669\" /><figcaption>Sketchnote of my talk.</figcaption></figure>\n</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#thanks\" name=\"thanks\">#</a> Thanks!</h3>\n<p>Thanks to the organizers for having me again and thanks to the attendees for being there. It was great to have a full room full of you at such a wonderful location. Unlike <a href=\"https://www.bram.us/2024/05/23/mpa-view-transitions-are-here-jsheroes/\">last year</a> I <em>did</em> stay around after the event to join the crew and speakers for a post-event traditional Romanian BBQ.</p>\n<p><figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6915.jpeg\" alt=\"\" width=\"560\" height=\"420\" class=\"alignnone size-medium wp-image-35659\" /><figcaption>Some of us at the post-event BBQ.</figcaption></figure>\n</p>\n<p>I really like JSHeroes, it‚Äôs one of those events that is not doing this with the goal of making a huge profit but that is doing it in service of the crowd ‚Äì They simply <em>‚Äúget it‚Äù</em>. All talks were of high quality but unfortunately I had to miss the first few ones as I was flying in from Prague <a href=\"https://www.bram.us/2025/05/31/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo/\">where I spoke the day before</a>.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\"><p>üíÅ‚Äç‚ôÇÔ∏è If you are a conference or meetup organiser, don't hesitate to <a href=\"https://www.bram.us/speaking-training/\">contact me to come speak at your event</a>.</p></div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/05/31/scroll-driven-animations-with-css-jsheroes/feed/"
          },
          "slash:comments": {
            "#text": 0
          }
        },
        {
          "title": {
            "#text": "Supercharge Web UX with View Transitions (2025.05.28 @ WebExpo)"
          },
          "link": {
            "#text": "https://www.bram.us/2025/05/31/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/05/31/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo/#respond"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Sat, 31 May 2025 14:16:27 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "public speaking"
            },
            {
              "#text": "view transitions"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35646",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "Slides + Recording of the talk ‚ÄúSupercharge Web UX with View Transitions‚Äù I gave at WebExpo."
          },
          "content:encoded": {
            "#text": "<p><figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-560x373.jpeg\" alt=\"\" width=\"560\" height=\"373\" class=\"alignnone size-medium wp-image-35657\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-560x373.jpeg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-1120x747.jpeg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-768x512.jpeg 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-1536x1024.jpeg 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-2048x1365.jpeg 2048w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/TKF_8683-1568x1045.jpeg 1568w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /><figcaption>Me on stage at WebExpo. Photo by <a href=\"https://tomkoubafoto.pixieset.com/\">Tom√°≈° Kouba</a></figcaption></figure>\n</p>\n<div class=\"intro\">\n<p>Earlier this week I spoke at <a href=\"https://webexpo.net/\">WebExpo</a> in prague and gave a talk ‚ÄúSupercharge Web UX with View Transitions‚Äù</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#the-talk\">The Talk</a></li>\n<li><a href=\"#slides\">Slides</a></li>\n<li><a href=\"#recording\">Recording/Video</a></li>\n<li><a href=\"#thanks\">Thanks!</a></li>\n</ul>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-talk\" name=\"the-talk\">#</a> The Talk</h3>\n<p>The talk I gave is a full-length talk of a little over 30 minutes.</p>\n<blockquote>\n<p>Tired of disjointed web apps? View Transitions are the game-changer you&#8217;ve been waiting for. Whether your app is single or multi-page, this powerful API lets you create seamless, native-like experiences that captivate users. Join me as I dive into the world of View Transitions, showing you how to replace jarring page loads with elegant transitions. Learn to harness the flexibility of CSS and the power of JavaScript to customize transitions and create a truly unique experience. If you&#8217;re ready to take your web apps to the next level, this talk is a must-attend.</p>\n</blockquote>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#slides\" name=\"slides\">#</a> Slides</h3>\n<p>The slides of my talk are <a href=\"https://slidr.io/bramus/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo\">up on slidr.io</a> are embedded below:</p>\n<p><iframe loading=\"lazy\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" allowtransparency=\"true\" frameborder=\"0\" id=\"slidrio-deck-3170\" src=\"https://slidr.io/bramus/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo?embed=true\" style=\"border:0; padding:0; margin:0; background:transparent;\" width=\"560\" height=\"490\"><a href=\"https://slidr.io/bramus/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo\" title=\"Supercharge Web UX with View Transitions (2025.05.28 @ React Brussels)\">Watch the slides</a></iframe></p>\n<p>These exported slides don‚Äôt contain any recordings of the demos included, but you can follow the link to check them out yourself. For the Same-Document View Transitions demos you will need Chrome 111+ or Safari 18. For the Cross-Document View Transitions demos you need Chrome 126+ or Safari 18.2.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#recording\" name=\"recording\">#</a> Recording/Video</h3>\n<p>You can <a href=\"https://slideslive.com/39043165/supercharge-web-ux-with-view-transitions?locale=en\">watch the recording of this talk on SlidesLive</a>, or right here in the embed. You need to unlock the recording by entering an email address ‚Äì any email address &#8211; before you can watch it.</p>\n<div id=\"presentation-embed-39043165\"></div>\n<p><script src=\"https://slideslive.com/embed_presentation.js\"></script><br />\n<script>\n  embed = new SlidesLiveEmbed(\"presentation-embed-39043165\", {\n    presentationId: \"39043165\",\n    autoPlay: false,\n    verticalEnabled: true,\n  });\n</script></p>\n<p>The slides were captured individually (yay!) but unfortunately the transitions in between the slides were not recorded. A pity, as I often use animations ‚Äì such as keyboard typing one ‚Äì in my decks to make sure you are focused onto the right part of the slides.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#thanks\" name=\"thanks\">#</a> Thanks!</h3>\n<p>Thanks to the organizers <em>(≈†√°rka and Steven)</em> for having me again and thanks to the attendees for being there. It was an honor to speak to you at this BEAUTIFUL venue and to be part of the AMAZING line-up full of wonderful people <em>(Nadieh, Krazimir, Rowdy, Stephanie, Tejas, Shruti, Carmen, Tim, Vitaly, Robin, Darko, Elis, Erik, Tammy, ‚Ä¶)</em>.</p>\n<p><figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-560x420.jpeg\" alt=\"\" width=\"560\" height=\"420\" class=\"alignnone size-medium wp-image-35649\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-560x420.jpeg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-1120x840.jpeg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-768x576.jpeg 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-1536x1152.jpeg 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-2048x1536.jpeg 2048w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/IMG_6772-1568x1176.jpeg 1568w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /><figcaption><a href=\"https://stephaniewalter.design/\">St√©phanie Walter</a> on stage at WebExpo.</figcaption></figure>\n</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\"><p>üíÅ‚Äç‚ôÇÔ∏è If you are a conference or meetup organiser, don't hesitate to <a href=\"https://www.bram.us/speaking-training/\">contact me to come speak at your event</a>.</p></div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/05/31/supercharge-web-ux-with-view-transitions-2025-05-28-webexpo/feed/"
          },
          "slash:comments": {
            "#text": 0
          }
        },
        {
          "title": {
            "#text": "Web animations today and tomorrow (Google I/O 2025)"
          },
          "link": {
            "#text": "https://www.bram.us/2025/05/22/web-animations-today-and-tomorrow-google-i-o-2025/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/05/22/web-animations-today-and-tomorrow-google-i-o-2025/#respond"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Thu, 22 May 2025 04:36:30 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "css"
            },
            {
              "#text": "googleio"
            },
            {
              "#text": "public speaking"
            },
            {
              "#text": "view transitions"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35636",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "For this <a href=\"http://io.google/2025\">year‚Äôs Google I/O</a>, I recorded the session ‚ÄúWeb animations today and tomorrow‚Äù. Check it out to learn how to guide, inform, and delight users by adding subtle and supportive animations to your web UIs."
          },
          "content:encoded": {
            "#text": "<p>For this <a href=\"http://io.google/2025\">year‚Äôs Google I/O</a>, I recorded the session ‚ÄúWeb animations today and tomorrow‚Äù. Check it out to learn how to guide, inform, and delight users by adding subtle and supportive animations to your web UIs.</p>\n<p><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UcXWY057YuQ?si=lctmPvjs3-TaRuUH\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/UcXWY057YuQ.jpg\" alt=\"\" width=\"560\" height=\"315\" class=\"alignnone size-medium wp-image-35637\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/05/UcXWY057YuQ.jpg 1280w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/UcXWY057YuQ-560x315.jpg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/UcXWY057YuQ-1120x630.jpg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/05/UcXWY057YuQ-768x432.jpg 768w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /></iframe></p>\n<p>Topics covered in the talk are:</p>\n<ul>\n<li>Animation durations and easings</li>\n<li>CSS @starting-style</li>\n<li>Animate to <code>height: auto</code> and other intrinsic sizing keywords</li>\n<li>Scroll-Driven Animations</li>\n<li>View Transitions</li>\n</ul>\n<p>If you like this talk, please give it a thumbs up on YouTube üôÇ</p>\n<p><a href=\"https://www.youtube.com/watch?v=UcXWY057YuQ\">Watch ‚ÄúWeb animations today and tomorrow‚Äù on YouTube &rarr;</a></p>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/05/22/web-animations-today-and-tomorrow-google-i-o-2025/feed/"
          },
          "slash:comments": {
            "#text": 0
          }
        },
        {
          "title": {
            "#text": "View Transitions Applied: Smoothly animating a border-radius with a View Transition, revisited"
          },
          "link": {
            "#text": "https://www.bram.us/2025/05/15/view-transitions-border-radius-revisited/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/05/15/view-transitions-border-radius-revisited/#respond"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Thu, 15 May 2025 19:46:32 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "css"
            },
            {
              "#text": "view transitions"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35608",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "Instead of duplicating an animation on the <code>::view-transition-group</code> pseudo, you can also rely on CSS transitions on the original element ‚Ä¶ if you‚Äôve set it up correctly."
          },
          "content:encoded": {
            "#text": "<div style=\"width: 640px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-35608-1\" width=\"640\" height=\"397\" loop autoplay muted preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4?_=1\" /><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4\">https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4</a></video></div>\n<div class=\"intro\">\n<p>Instead of duplicating an animation on the <code>::view-transition-group</code> pseudo, you can also rely on CSS transitions on the original element ‚Ä¶ if you‚Äôve set it up correctly.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n<p>üåü This post is about View Transitions. If you are not familiar with the basics of it, check out <a href=\"https://www.bram.us/2024/11/17/supercharge-web-ux-with-view-transitions-react-brussels/#recording\">this 30-min talk of mine</a> to get up to speed.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-animation-approach\" name=\"the-animation-approach\">#</a> The animation approach</h3>\n<p>In <a href=\"https://brm.us/view-transitions-border-radius\">https://brm.us/view-transitions-border-radius</a> I shared how you can nicely animate things like a <code>border-radius</code> with View Transitions. To recap, View Transitions animate snapshots and because of that things like a changing border won‚Äôt nicely animate but they will fade from the old to the new snapshot.</p>\n<p>To work around that I suggested to replicate the border animation and put it onto the <code>::view-transition-group</code> pseudo. For example, if the <code>border-radius</code> of your <code>#card</code> element changes from <code>0.25rem</code> to <code>3rem</code>, you‚Äôd create such an animation and apply it to the <code>::view-transition-group</code> as follows:</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">@keyframes adjust-group {\n\tfrom {\n\t\tborder-radius: 0.25rem;\n\t}\n\tto {\n\t\tborder-radius: 3rem;\n\t}\n}\n::view-transition-group(card) {\n\tbox-sizing: border-box;\n\tborder: 2px solid black;\n\tanimation-name: -ua-view-transition-group-anim-card, adjust-group;\n}\n:active-view-transition-type(shrink)::view-transition-group(card) {\n\tanimation-direction: normal, reverse;\n}\n::view-transition-image-pair(card) {\n\tdisplay: none;\n}</code></pre>\n<p>Live demo (that animates more than only the <code>border-radius</code>):</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"dPyzPQd\" data-pen-title=\"View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text + border)\" data-user=\"bramus\" data-token=\"191d5f4adacdf1e2226d04792de3f260\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/dPyzPQd/191d5f4adacdf1e2226d04792de3f260\"><br />\n  View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text + border)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p>A key aspect to making this actually work, is that you have to individually capture the background part of the <code>#card</code> and the content/foreground part of it. It‚Äôs only the background part that you animate.</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">#card {\n\tview-transition-name: card;\n}\n\n#card &gt; #card-content {\n\tview-transition-name: card-content;\n}</code></pre>\n<p>Check out the following visualization which, upon hovering, shows the two layers that get captured. It‚Äôs the background layer that gets animated:</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"XJJGNRN\" data-pen-title=\"Untitled\" data-user=\"bramus\" data-token=\"834e41c3983688a374374b4b5ca0282f\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/XJJGNRN/834e41c3983688a374374b4b5ca0282f\"><br />\n  Untitled</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#a-simpler-approach\" name=\"a-simpler-approach\">#</a> A simpler approach</h3>\n<p>On BlueSky, <a href=\"https://bsky.app/profile/martr.app/\">Martin Trapp</a> ‚Äì from <a href=\"https://vtbag.dev/\">‚ÄúThe Bag of Tricks for View Transitions‚Äù</a> ‚Äì <a href=\"https://bsky.app/profile/martr.app/post/3lk7lcz55cs2o\">let me know</a> that there is a simpler approach.</p>\n<blockquote>\n<p>When such things get too complicated for me, I usually drop the old image along with the new one&#8217;s entry animation and rely on the fact that the new image is a live representation of the original element.</p>\n<p>That way, I can simply use CSS transitions on the original element during the #ViewTransitions morph and be done with it.</p>\n</blockquote>\n<p>So instead of creating an animation on the <code>::view-transition-group</code> pseudo, Martin‚Äôs approach is to show only the new state of the box ‚Äì through the <code>::view-transition-new</code> pseudo ‚Äì and rely on CSS transitions to have it transition the border with a duration that is set to the same duration + timing-function as the View Transition. Nice!</p>\n<p>In code, it becomes this:</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">#card {\n\tview-transition-name: card;\n\ttransition: all 2s ease; /* Same duration and easing as the View Transition */\n}\n\n#card &gt; #card-content {\n\tview-transition-name: card-content;\n}\n\n::view-transition-group(card) {\n\tanimation-duration: 2s;\n\tanimation-timing-function: ease;\n}\n::view-transition-old(card) {\n\tdisplay: none;\n}\n::view-transition-new(card) {\n\tanimation: none;\n\twidth: 100%;\n\theight: 100%;\n}</code></pre>\n<p>Here‚Äôs the demo that Martin shared:</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"ogNobmB\" data-pen-title=\"View Transitions with a Border Radius (original by Bramus)\" data-user=\"martrapp\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/martrapp/pen/ogNobmB\"><br />\n  View Transitions with a Border Radius (original by Bramus)</a> by Martin Trapp (<a href=\"https://codepen.io/martrapp\">@martrapp</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p>This approach too requires you to decompose the element into a background <em>(which you animate)</em> and a foreground layer. What you can drop from the animation-based approach is the extra logic to determine the <code>type</code> for the View Transition + the CSS to reverse the animation that goes along with it.</p>\n<p>One (minor) nit with Martin‚Äôs code is that instead of transitioning <code>all</code>, I‚Äôd transition only the properties that need to transition. The downside is that it can result in quite a big list, such as for <a href=\"https://codepen.io/bramus/pen/myyoyPW/ba2820d070f1b6674eef1dc5e36b9aea\">this demo</a>:</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">#card {\n\ttransition-property: border, background-color, border-radius, aspect-ratio, font-size; /* Yeah, that‚Äôs a lot of properties ‚Ä¶ */\n\ttransition-duration: 2s;\n\ttransition-timing-function: ease;\n}</code></pre>\n<p>Thanks for sharing your ideas, Martin!</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n\t<p><b>üî• Like what you see? Want to stay in the loop? Here's how:</b></p>\n\t<ul>\n            <li><a href=\"https://bsky.app/profile/bram.us\">ü¶ã Follow @bram.us on BlueSky</a></li>\n            <li><a href=\"https://bram.us/feed\">üî∏ Follow bram.us using RSS</a></li>\n\t</ul>\n\t<p>I can also be found on <a href=\"https://x.com/bramus\">ùïè Twitter</a> and <a href=\"https://front-end.social/@bramus\">üêò Mastodon</a> but only post there sporadically.</p>\n</div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/05/15/view-transitions-border-radius-revisited/feed/"
          },
          "slash:comments": {
            "#text": 0
          },
          "enclosure": {
            "@_url": "https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4",
            "@_length": "210037",
            "@_type": "video/mp4"
          }
        },
        {
          "title": {
            "#text": "Polyfilling CSS with CSS Parser Extensions"
          },
          "link": {
            "#text": "https://www.bram.us/2025/05/04/css-parser-extensions-pitch/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/05/04/css-parser-extensions-pitch/#comments"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Sun, 04 May 2025 20:18:53 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "css"
            },
            {
              "#text": "houdini"
            },
            {
              "#text": "polyfill"
            },
            {
              "#text": "public speaking"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35529",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "In April I attended #BlinkOn, the conference for web platform contributors in the Chromium open source project. At the conference I gave a presentation about <strong>‚ÄúCSS Parser Extensions‚Äù</strong>, a wild idea I have to fix CSS polyfilling once and for all.\n\nIf you didn‚Äôt know, polyfilling CSS features is extremely hard, mainly because the CSS Parser discards what it does not understand. So what if, instead of having authors write their own parser and cascade to polyfill a CSS feature, they could teach the parser some new tricks?"
          },
          "content:encoded": {
            "#text": "<p><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch.png\" alt=\"\" width=\"560\" height=\"314\" class=\"alignnone size-medium wp-image-35566\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch.png 2200w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch-560x314.png 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch-1120x628.png 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch-768x431.png 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch-1536x862.png 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch-2048x1149.png 2048w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-pitch-1568x880.png 1568w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /></p>\n<div class=\"intro\">\n<p>In April I attended <a href=\"https://www.chromium.org/events/blinkon-20/\">BlinkOn</a>, the conference for web platform contributors in <a href=\"https://www.chromium.org/Home/\">the Chromium open source project</a>. At the conference I gave a presentation about <strong>‚ÄúCSS Parser Extensions‚Äù</strong>, a wild idea I have to fix CSS polyfilling once and for all.</p>\n<p>If you didn‚Äôt know, polyfilling CSS features is extremely hard, mainly because the CSS Parser discards what it does not understand. So what if, instead of having authors write their own parser and cascade to polyfill a CSS feature, they could teach the parser some new tricks?</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note note--warning\">\n<p>‚ö†Ô∏è This is a personal idea. There is nothing official about this ‚Ä¶ yet.</p>\n<p>The goal of the talk I gave (<a href=\"https://slidr.io/bramus/css-parser-extensions\">slides</a>, <a href=\"https://www.youtube.com/watch?v=njdiu83do0M\">recording</a>) was to <em><a href=\"https://xkcd.com/356/\">nerd snipe</a></em> some of the engineers present and get their input on this wild idea I have been sitting on for the past two years. Next steps will be to whip up a proper explainer and then take this to the CSS WG to seek broader interest. It will take years to get this done, if it ever gets done.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Intro</h3>\n<p>When it comes to the adoption of new CSS features, web developers often tell me that they won‚Äôt use a feature yet because said feature does not have cross-browser support. Within their organization there is often still the expectation that <a href=\"https://web.archive.org/web/20230326062701/https://dowebsitesneedtolookexactlythesameineverybrowser.com/\">websites need to look exactly the same in every browser</a>. Or they simply want to write code only once &#8211; code of which they know that it works fine across various browsers (including some older versions of those browsers).</p>\n<p>As a result, the adoption of new CSS features ‚Äì including features that are a perfect <a href=\"https://piccalil.li/blog/its-about-time-i-tried-to-explain-what-progressive-enhancement-actually-is/\">Progressive Enhancement</a> ‚Äì is blocked until the feature is <a href=\"https://web-platform-dx.github.io/web-features/\">Baseline Widely available</a>. Assuming an average <em>time-to-interop</em> of ¬±1.5 years, this means a CSS feature is only getting wider adoption 4 years after it first shipped in a browser.</p>\n<p><em>(There are some exceptions of course, and there are many other factors contributing to the (not-)adoption of a feature, but very often that‚Äôs how it goes)</em></p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop.png\" alt=\"\" width=\"560\" height=\"315\" class=\"alignnone size-medium wp-image-35565\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop.png 2200w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop-560x315.png 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop-1120x630.png 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop-768x432.png 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop-1536x864.png 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop-2048x1152.png 2048w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/css-parser-extensions-time-to-interop-1568x882.png 1568w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /><figcaption>Timeline of a typical feature release. Between the feature shipping in the first browser and the feature become Baseline Widely Available, there is a minimum of 4 years.</figcaption></figure>\n<p>To speed up the adoption of new CSS features, polyfills can be created. For example, the <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill\">polyfill for container queries</a> has proven its worth. However, this polyfill ‚Äì like any other CSS polyfill ‚Äì is not perfect and comes with <a href=\"https://github.com/GoogleChromeLabs/container-query-polyfill?tab=readme-ov-file#limitations\">some limitations</a>. Furthermore, ¬±65% of the code of that polyfill is dedicated to parsing CSS and extracting the necessary information such property values and container at-rules from the CSS ‚Äì which is a bit ridiculous.</p>\n<p><mark>CSS Parser Extensions aims to remove these limitations and to ease this information gathering by allowing authors to extend the CSS Parser with new syntaxes, properties, keywords, etc. for it to support. By tapping directly into the CSS parser, CSS polyfills become easier to author, have a reduced size &#038; performance footprint, and become more robust.</mark></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>How to (try to) polyfill CSS today</h3>\n<div class=\"note\">\n<p>The problem is clearly stated in the talk <a href=\"https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/\">The Dark Side of Polyfilling CSS</a> by Philip Walton. It is recommended to watch this presentation to get a good understanding of the problem. Below is an abbreviated and less-detailed version of the problem statement.</p>\n</div>\n<p>When authors create a polyfill for a CSS feature, they can‚Äôt rely on the CSS parser giving them the information about, for example, the declarations they want to polyfill. This is because the CSS Parser throws away rules and declarations it couldn‚Äôt successfully parse. Therefore, polyfills need to gather and re-process the stylesheets themselves in order to get the tokens for the feature that they want to polyfill.</p>\n<p>While this looks as simple as performing these 3 steps, it‚Äôs more complicated than it looks.</p>\n<ol>\n<li>Gather all styles</li>\n<li>Parse the styles</li>\n<li>Apply the styles</li>\n</ol>\n<p>Each step has its own challenges and limitations, detailed below, and nicely summarized by this quote by Philip Walton from 2016 (!):</p>\n<figure>\n<blockquote class=\"large\"><p>If you‚Äôve never tried writing a CSS polyfill yourself, then you‚Äôve probably never experienced the pain.</blockquote><figcaption>‚Äì Philip Walton, <cite><a href=\"https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/\"\">The Dark Side of Polyfilling CSS</a></cite>, Dec 2016</figcaption></figure>\n<h4>1. Gather all styles</h4>\n<p>Collecting all styles in itself already is challenging, as authors need to gather these from a various sources:</p>\n<ol>\n<li><code>document.styleSheets</code></li>\n<li><code>document.adoptedStyleSheets</code></li>\n<li>Element attached styles</li>\n</ol>\n<p>After collecting all references to these stylesheets, the work is done as authors also need to keep an eye out for mutations in any of those sources.</p>\n<h4>2. Parse the styles</h4>\n<p>With all style sheets in hand, authors can then continue to parse the contents of the style sheets. This sounds like a no-brainer but it already comes with challenges as in many cases they can‚Äôt access contents of stylesheets being served from a CORS-protected origin.</p>\n<p>In case they do have access to the style sheet‚Äôs contents, authors need to manually tokenize and parse the contents, duplicating work that was already done by the UA.</p>\n<p>The custom CSS parser they let loose on the source code must also work with the <em>entire</em> CSS Syntax. For example, when a UA ships a feature like CSS nesting, the polyfill‚Äôs CSS parser also needs to support it. As a result, CSS parsers used in CSS polyfills constantly need to play catch-up to support the latest syntax.</p>\n<h4>3. Apply the styles</h4>\n<p>With the styles parsed authors must then figure out which elements they need to apply things to. For declarations for example, this basically means that they need to write their own cascade. They also need to implement CSS features such as Media Queries and take those into account. And oh, there‚Äôs also the Shadow DOM which complicates things.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Proposed Solution</h3>\n<p>What if, instead of having polyfill authors to write their own CSS parser and cascade, they could teach the parser some new tricks?</p>\n<p>As in: give authors access to the CSS Parser using JavaScript ‚Äì through <code>CSS.parser</code> ‚Äì so that they can extend it with new syntaxes, properties, keywords, and functions to support.</p>\n<ul>\n<li>CSS Keywords: <code>CSS.parser.registerKeyword(‚Ä¶)</code></li>\n<li>CSS Functions: <code>CSS.parser.registerFunction(‚Ä¶)</code></li>\n<li>CSS Syntaxes: <code>CSS.parser.registerSyntax(‚Ä¶)</code></li>\n<li>CSS Declarations: <code>CSS.parser.registerProperty(‚Ä¶)</code></li>\n</ul>\n<p>After registering one of these features with the CSS Parser, the parser won‚Äôt discard the tokens associated with it and authors can use the feature as if the parser never discarded them.</p>\n<p>For example, when registering an unsupported CSS Property + Syntax, the parser will keep the declaration, and the property will show up in things like <code>window.getComputedStyle()</code>. Feature checks using <code>CSS.supports()</code> / <code>@supports()</code> will then also pass.</p>\n<p>In addition to these registrations, some utility functions should be made available to authors as well. For example, ways to get the <em>specified</em> style of an element, a way to compute lengths to the pixel value they represent, a way to figure out which registrations have already been done, etc.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Examples</h3>\n<div class=\"note note--warning\">\n<p>‚ö†Ô∏è These examples should give you an idea of what should be possible with CSS Parser Extensions. The syntax here is not set in stone at all. It is something I came up while exploring the possibilities.</p>\n</div>\n<h4>Register a keyword: <code>random</code></h4>\n<p>In the following example the inexistent <code>random</code> keyword gets registered. Whenever the CSS engine parses that keyword, it will return a random value.</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">CSS.parser\n  .registerKeyword(&apos;random:&lt;number&gt;&apos;, {\n    caching_mode: CSS.parser.caching_modes.PER_MATCH,\n    invalidation: CSS.parser.invalidation.NONE,\n  })\n  .computeTo((match) =&gt; {\n    return Math.random();\n  });\n;</code></pre>\n<p>The replacement is meant only to happen once per occurrence in the style sheet, which is controlled by the <code>caching_mode</code> and <code>invalidation</code> options.</p>\n<h4>Register a function: <code>light-dark()</code></h4>\n<p>The following snippet polyfills the wonderful <code>light-dark()</code>. It‚Äôs a function that returns one of two passed in colors depending on the used <code>color-scheme</code> for the element. When the <code>color-scheme</code> is <code>light</code> the first value gets used and when it‚Äôs something else the second value gets returned.</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">CSS.parser\n  .registerFunction(\n    &apos;light-dark(light:&lt;color&gt;, dark:&lt;color&gt;):&lt;color&gt;&apos;,\n    { invalidation: [&apos;color-scheme&apos;] }\n  )\n  .computeTo((match, args) =&gt; {\n    const { element,  property, propertyValue } = match;\n    const colorScheme =\n      CSS.parser.getSpecifiedStyle(element)&#x2028;\n      .getPropertyValue(&apos;color-scheme&apos;);\n\n    if (colorScheme == &apos;light&apos;) return args.light;\n    return args.dark;\n  })\n);</code></pre>\n<p>Because the returned value depends on the <code>color-scheme</code> value, the <code>color-scheme</code> property is listed as a property that causes an invalidation.</p>\n<h4>Register a function: <code>at-rule()</code></h4>\n<p>The following code snippet polyfills <a href=\"http://brm.us/at-rule\">the wonderful <code>at-rule()</code></a> function that allows you to feature detect at-rules. It returns a <code>&lt;boolean&gt;</code> based on a check.</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">CSS.parser\n  .registerFunction(&apos;at-rule(keyword:&lt;string&gt;):&lt;boolean&gt;&apos;, { \n    caching_mode: CSS.parser.computation_modes.GLOBAL,\n  })\n  .computeTo((match, args) =&gt; {\n    switch (args.keyword) {\n      case &apos;@view-transition&apos;:\n        return (&quot;CSSViewTransitionRule&quot; in window);\n      case &apos;@starting-style&apos;:\n        return (&quot;CSSStartingStyleRule&quot; in window);\n      // &mldr;\n      default:\n        return false;\n    }\n  })\n;</code></pre>\n<p>Because the detection should only be done once, the result of the check can be cached globally.</p>\n<div class=\"note\">\n<p>Custom functions are excluded here. Maybe these should be added, or maybe not.</p>\n</div>\n<h4>Register a property: <code>size</code></h4>\n<p>The CSS <code>size</code> property is a brand new property that was only <a href=\"https://github.com/w3c/csswg-drafts/issues/820#issuecomment-2718529948\">resolved</a> on recently. It still needs to be specced and implemented, and will act as a shorthand for setting the <code>width</code> and <code>height</code> in one go.</p>\n<p>The property gets registered with the standard traits a property has. In addition to its <code>computeTo</code> method that determines its computed value, the <code>onMatch</code> method returns a block of declarations to be used as a replacement whenever a declaration using the property is detected.</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">CSS.parser\n  .registerProperty(&apos;size&apos;, {\n      syntax: &apos;[&lt;length-percentage [0,&infin;]&gt; | auto]{1,2}&apos;,\n      initialValue: &apos;auto&apos;,\n      inherits: false,\n      percentages: &apos;inline-size&apos;\n      animatable: CSS.parser.animation_types.BY_COMPUTED_VALUE,\n  })\n  .computeTo(&mldr;)\n  .onMatch((match, computedValue) =&gt; {\n    const { element, specifiedValue } = match;\n    return {\n      &apos;width&apos;: computedValue[0],\n      &apos;height&apos;: computedValue[1] ?? computedValue[0],\n    };\n  });\n;</code></pre>\n<h4>Register a property: <code>scroll-timeline</code></h4>\n<p>Here‚Äôs another example of registering a property, namely the <code>scroll-timeline</code> property. The registration and matching can be done separately, and it also shows that some data on a match can be stored for later use. Here it‚Äôs a <code>ResizeObserver</code> that gets added to ‚Äì and later removed from ‚Äì the matched element.</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">CSS.parser.registerProperty(&apos;scroll-timeline&apos;, { &mldr; });\n\nCSS.parser\n  .matchProperty(&apos;scroll-timeline&apos;)\n  // No .computeTo &mldr; so it would just return the declared value\n  .onMatch(parserMatch =&gt; {\n    const resizeObserver = new ResizeObserver((entries) =&gt; {\n        // &mldr;\n    });\n    resizeObserver.observe(parserMatch.element);\n    parserMatch.data.set(&apos;ro&apos;, resizeObserver);\n  })\n  .onElementUnmatch(parserMatch =&gt; {\n    const resizeObserver = parserMatch.data.get(&apos;ro&apos;);\n    resizeObserver.disconnect();\n  })\n;</code></pre>\n<h4>Register a syntax</h4>\n<p>It‚Äôs also possible to register a syntax for later use.</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">CSS.parser\n  .registerSyntax(\n    &apos;&lt;single-animation-timeline&gt;&apos;,\n    &apos;auto | none | &lt;dashed-ident&gt; | &lt;scroll()&gt; | &lt;view()&gt;&apos;\n  )\n;\n\nCSS.parser\n  .registerProperty(&apos;animation-timeline&apos;, {\n    syntax: &apos;&lt;single-animation-timeline&gt;#&apos;,\n    initialValue: &apos;auto&apos;,\n    inherits: false,\n    animatable: CSS.parser.ANIMATABLE_NO,\n  })\n  .onMatch(‚Ä¶);\n</code></pre>\n<h4>Fully fledged example: <code>position: fixed / visual</code></h4>\n<p>In <a href=\"https://github.com/w3c/csswg-drafts/issues/7475#issuecomment-1182982687\">w3c/csswg-drafts#7475</a> I suggested an extension to <code>position: fixed</code> that allows you to indicate which <em>thing</em> the element should be fixed to.</p>\n<ol>\n<li><code>position: fixed / layout</code> = current behavior, would be the same as <code>position: fixed</code>)</li>\n<li><code>position: fixed / visual</code> = fixed against the visual viewport, also when zoomed in</li>\n<li><code>position: fixed / visual-unzoomed</code> = positioned against the unzoomed visual viewport</li>\n</ol>\n<p>The code to polyfill that could look something like this:</p>\n<pre><code class=\"language-js\" style=\"tab-size: 2\">// Register syntaxes used by the polyfill.\nCSS.parser.registerSyntax(&apos;&lt;position&gt;&apos;, &apos;static | relative | absolute | sticky | fixed&apos;);\nCSS.parser.registerSyntax(&apos;&lt;position-arg&gt;&apos;, &apos;layout | visual | visual-unzoomed&apos;);\n\n// Extend the existing &grave;position&grave; property registration, only overriding certain parts.\n// The non-overriden parts remain untouched\nconst positionWithArgRegistration = CSS.parser\n  .registerProperty(&apos;position&apos;, {\n    extends: &apos;position&apos;,\n    syntax: &apos;&lt;position&gt; [/ arg:&lt;position-arg&gt;]?&apos;,\n  })\n  // No .computeTo &mldr; so the syntax will compute individually\n;\n\nconst cssPositionFixed =\n    positionWithArgRegistration\n      .with(&apos;position&apos;, &apos;fixed&apos;) // Only &grave;position: fixed&grave;\n      .with(&apos;arg&apos;) // Any arg value\n    .onMatch((match) =&gt; {\n        const { element, specifiedValue } = match;\n        const { position, arg } = specifiedValue;\n\n        const styles = CSS.parser.getSpecifiedStyle(element);\n        const visualViewport = determineVisualViewport();\n\n        switch (arg) {\n            case &apos;layout&apos;:\n                return {\n                    position: &apos;fixed&apos;,\n                };\n\n            case &apos;visual&apos;:                    \n                return {\n                    position: &apos;fixed&apos;,\n                    bottom: (() =&gt; {\n                        if (styles.bottom.toString() != &apos;auto&apos;) {\n                            return styles.bottom.add(CSS.px(visualViewport.height));\n                        }\n                    })(),\n                };\n\n            case &apos;visual-unzoomed&apos;:\n                return {\n                    position: &apos;fixed&apos;,\n                    // @TODO: change all other properties\n                };\n        }\n    })\n;\n\nwindow.visualViewport.addEventListener(&apos;resize&apos;, () =&gt; {\n    cssPositionFixed.triggerMatch();\n});</code></pre>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>Outcome and considerations</h3>\n<h4>Benefits</h4>\n<p>By allowing polyfill authors to extend the CSS Parser that ships with the UA, they no longer need to gather all styles, parse stylesheets themselves, or figure out when to apply styles to an element. The resulting polyfills will be easier to author, smaller in size, perform faster, and be more robust and efficient.</p>\n<p>With robust CSS polyfills powered by CSS Parser Extensions available, the adoption of CSS features is no longer blocked on Baseline widely available cross-browser support, leading to an increased adoption rate.</p>\n<p>Furthermore this would also allow browser vendors to more easily prototype a feature as it would require less investment upfront.</p>\n<h4>Risks / Caveats</h4>\n<p>For this to work, the timing of when things get executed are of utmost important. You don‚Äôt want to run blocking JavaScript in between <a href=\"https://web.dev/articles/rendering-performance#the_pixel_pipeline\">the Style-Layout-Paint steps of the pixel pipeline</a>. This is something that needs to be carefully thought about. Maybe this should be modeled as an Observer?</p>\n<p>Something that is currently not included is polyfilling selectors. I have not given this any thought yet, so this could be added once it has been properly looked into. My initial guess is that polyfilling selectors like <a href=\"https://open-ui.org/components/interest-invokers.explainer/#the-has-interest-pseudo-class\"><code>:has-interest</code></a> could easily be done, but that polyfilling pseudo-elements would be a bit more difficult as you‚Äôd also need to modify the DOM for those the work.</p>\n<p>Additionally not every CSS feature can be polyfilled. Things like View Transitions come to mind.</p>\n<p>And finally, this whole idea falls or stands with buy-in from all browser vendors. If one of the <em>(major)</em> browser vendors is not on board with this, then this project will fail.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3>So, what‚Äôs next?</h3>\n<p>It‚Äôs been 12 years since <a href=\"https://extensiblewebmanifesto.org/\">The Extensible Web Manifesto</a> launched and 9 years since <a href=\"https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/\">Philip Walton shared how hard it is to polyfill CSS</a>, yet somehow not much has changed since then.</p>\n<p>To try and move the needle here, next step for me is to whip up a proper explainer and to take this to the CSS WG to seek broader interest. Some of my colleagues at Google have expressed interest in this and have offered their help, and I know that <a href=\"https://bkardell.com/blog/HoudiniReRe.html\">Brian is interested in this as well</a> ‚Ä¶ so maybe more people (from other browser vendors) will be too.</p>\n<p>To set expectations here, though: don‚Äôt expect this to land any time soon. This will take years to build, if it gets built, which I hope it will.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#spread-the-word\" name=\"spread-the-word\">#</a> Spread the word</h3>\n<p>Feel free to reshare one of the following posts on social media to help spread the word:</p>\n<ul>\n<li><a href=\"https://bsky.app/profile/bram.us/post/3loeovkiz7k2t\">ü¶ã BlueSky</a></li>\n<li><a href=\"https://front-end.social/@bramus/114451445890425340\">ü¶£ Mastodon</a></li>\n<li><a href=\"https://x.com/bramus/status/1919273951189950629\">ùïè Twitter</a></li>\n</ul>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n\t<p><b>üî• Like what you see? Want to stay in the loop? Here's how:</b></p>\n\t<ul>\n            <li><a href=\"https://bsky.app/profile/bram.us\">ü¶ã Follow @bram.us on BlueSky</a></li>\n            <li><a href=\"https://bram.us/feed\">üî∏ Follow bram.us using RSS</a></li>\n\t</ul>\n\t<p>I can also be found on <a href=\"https://x.com/bramus\">ùïè Twitter</a> and <a href=\"https://front-end.social/@bramus\">üêò Mastodon</a> but only post there sporadically.</p>\n</div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/05/04/css-parser-extensions-pitch/feed/"
          },
          "slash:comments": {
            "#text": 1
          }
        },
        {
          "title": {
            "#text": "Anti-climax"
          },
          "link": {
            "#text": "https://www.bram.us/2025/04/14/anti-climax/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/04/14/anti-climax/#comments"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Mon, 14 Apr 2025 06:06:27 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "work"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35542",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "After a wonderful week in San Francisco and Mountain View, the week ended in a disaster when my colleague and friend Adam was told to find another role at Google ‚Äì Roughly translated: they fired him without actually firing him."
          },
          "content:encoded": {
            "#text": "<div class=\"intro\">\n<p>After a wonderful week in San Francisco and Mountain View, the week ended in a disaster when my colleague and friend Adam was told to find another role at Google ‚Äì Roughly translated: they fired him without actually firing him.</p>\n</div>\n<p>Last week I spent the week in San Francisco and Mountain View. On Monday and Tuesday I attended BlinkOn, the conference held for people contributing to Blink, which is the engine that powers Chromium. There, I met a lot of folks I work with (or converse with in spec issues) in person for the very first time. We had some good conversations ‚Äì conversations I typically don‚Äôt have as a fully remote employee.</p>\n<figure><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/8061364A-95E1-4659-9830-BE15741F20E4_1_105_c.jpeg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/8061364A-95E1-4659-9830-BE15741F20E4_1_105_c.jpeg\" alt=\"\" width=\"560\" height=\"316\" class=\"alignnone size-medium wp-image-35545\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/8061364A-95E1-4659-9830-BE15741F20E4_1_105_c.jpeg 1182w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/8061364A-95E1-4659-9830-BE15741F20E4_1_105_c-560x316.jpeg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/8061364A-95E1-4659-9830-BE15741F20E4_1_105_c-1120x631.jpeg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/8061364A-95E1-4659-9830-BE15741F20E4_1_105_c-768x433.jpeg 768w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /></a><figcaption>Photo at BlinkOn, folks attending a talk on Scoped View Transitions</figcaption></figure>\n<p>At the conference I also gave a presentation on <a href=\"https://brm.us/css-parser-extensions\">CSS Parser Extensions</a>, a wild idea I have to fix CSS polyfilling once and for all. It was great to see nods of approval bot from fellow Googlers but also people from Microsoft and other venues as I was giving my presentation.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<p>On Wednesday and Thursday I attended an engineering team onsite in the San Francisco offices. Because <a href=\"https://nerdy.dev/\">Adam</a>, <a href=\"https://una.im/\">Una</a>, and I closely collaborate with those engineering teams, we were also invited. Adam and I attended in person, and Una <em>(just back from maternity leave)</em> remotely.</p>\n<p>The atmosphere was great as we discussed a lot of things. Scrolling papercuts, address bars, gestures, physics, navigation models, ‚Ä¶ ideas were bouncing off the walls and the creative juices were flowing. Adam even nerdsniped me into <a href=\"https://codepen.io/bramus/pen/WbbdQYK/2138ee7d1ce9d142487b540e7b0ecfd6\">hacking a <code>clip-path</code> clipping solution for View Transitions</a> <em>(still WIP)</em>.</p>\n<figure><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/4B9BB2C7-4045-4AA3-A292-C426B8E5CA45_1_105_c.jpeg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/4B9BB2C7-4045-4AA3-A292-C426B8E5CA45_1_105_c.jpeg\" alt=\"\" width=\"560\" height=\"316\" class=\"alignnone size-medium wp-image-35547\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/4B9BB2C7-4045-4AA3-A292-C426B8E5CA45_1_105_c.jpeg 1182w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/4B9BB2C7-4045-4AA3-A292-C426B8E5CA45_1_105_c-560x316.jpeg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/4B9BB2C7-4045-4AA3-A292-C426B8E5CA45_1_105_c-1120x631.jpeg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/4B9BB2C7-4045-4AA3-A292-C426B8E5CA45_1_105_c-768x433.jpeg 768w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /></a><figcaption>Photo at the team onsite in SFO</figcaption></figure>\n<p>On Thursday evening we also had a team dinner on cruise in the bay itself. Our phones remained tucked away in our bags, as there still was so much to talk about with our friends from engineering.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<p>Riding high on 4 days of nothing but good vibes, our ways parted. As I was driving my rental car out of the parking garage to get back to my hotel, Adam called me on my phone. He asked about getting a message from a colleague of ours, which said how sorry they felt for Adam. Adam was like <strong>‚ÄúMan, did I just get fired and don‚Äôt know it yet?‚Äù</strong>. Uhm?!</p>\n<p>As we hung up, I suggested Adam to check his corp email. We had caught some wind about a reorg happening while at the dinner cruise, but surely this must be a mistake, right? A few minutes later Adam called back and suddenly things got real very quickly: <a href=\"https://nerdy.dev/ex-googler\">Adam‚Äôs role had been terminated</a> <em>(as well as 4 other people from our DevRel team)</em>.</p>\n<p>I parked the car and headed back to Adam‚Äôs hotel where we, together with vmpstr and flackr from engineering who we closely work with, just sat there at the table listening to Adam vent, holding back his tears.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<p>I‚Äôm currently on Hawaii taking a (long planned) vacation. I‚Äôve been here for two full days now, yet can‚Äôt stop thinking about what happened to Adam.</p>\n<p>As I shared on social media Adam is the brightest, most authentic, deeply passionate, extremely inspiring, funniest, and nicest person I have ever worked with. He poored his heart and soul into his job with one goal: to make the web as a whole a better place. He was a key person working on key projects ‚Ä¶ but apparently even that is not enough. A snap of the fingers and it‚Äôs game over for Adam as a Chrome Developer Relations Engineer.</p>\n<p>I get it that companies need to save money and that underperforming people can get fired. But <a href=\"https://abc.xyz/2025-0204/\">the quarterly earnings</a> speak differently and Adam certainly was not underforming. Not knowing the true reason why they chose him over other people at the company is putting a lot of pressure on our team. Not only do we now need to try to pick up the pieces caused by this poor decision making, we are also constantly living with the fear that today might have been our last in this role.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<p>I will miss Adam. Not only as a colleague but also as a friend. Silver lining in all this, maybe, is that I was there with Adam when he got the news, lending my ear, offering my support, and sharing emotions while grabbing a beer. I hope that when the day comes when I get booted, I too will have a friend standing next to me.</p>\n<figure><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/593C4641-D980-4CCF-9CF0-999E22D87514_1_201_a.jpeg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/593C4641-D980-4CCF-9CF0-999E22D87514_1_201_a.jpeg\" alt=\"\" width=\"420\" height=\"560\" class=\"alignnone size-medium wp-image-35549\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/04/593C4641-D980-4CCF-9CF0-999E22D87514_1_201_a.jpeg 627w, https://www.bram.us/wordpress/wp-content/uploads/2025/04/593C4641-D980-4CCF-9CF0-999E22D87514_1_201_a-420x560.jpeg 420w\" sizes=\"auto, (max-width: 420px) 100vw, 420px\" /></a><figcaption>Me, Adam, and Una in 2023 ‚Äì together we rocked CSS at Google/Chrome.</figcaption></figure>\n<p>Take care bud, I‚Äôm sure there‚Äôs a bright future ahead of you, even though you might not see it now.</p>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/04/14/anti-climax/feed/"
          },
          "slash:comments": {
            "#text": 1
          }
        },
        {
          "title": {
            "#text": "View Transitions Applied: Smoothly animating a border-radius with a View Transition"
          },
          "link": {
            "#text": "https://www.bram.us/2025/03/11/view-transitions-border-radius/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/03/11/view-transitions-border-radius/#comments"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Tue, 11 Mar 2025 22:59:28 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "view transitions"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35510",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "To smoothly animate things like borders as part of a View Transition, you need to duplicate that animation onto the <code>::view-transition-group</code>. For best effect, have the View Transition separately capture the <em>background</em> and <em>foreground</em> of the element you‚Äôre animating."
          },
          "content:encoded": {
            "#text": "<div style=\"width: 640px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-35510-2\" width=\"640\" height=\"397\" loop autoplay muted preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4?_=2\" /><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4\">https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4</a></video></div>\n<div class=\"intro\">\n<p>Because View Transitions animate snapshots, you can morph any element into another element. But for some type of transitions, the use of snapshots can sometimes work against you. For example: when the <code>border-radius</code> changes between the old and the new snapshot, you most likely want the <code>border-radius</code> to nicely animate from the old to the new state instead of seeing two snapshots fade.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n<p>üåü This post is about View Transitions. If you are not familiar with the basics of it, check out <a href=\"https://www.bram.us/2024/11/17/supercharge-web-ux-with-view-transitions-react-brussels/#recording\">this 30-min talk of mine</a> to get up to speed.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"update\">\n<p><strong>UPDATE 2025.05.15</strong> ‚Äì An alternative, and easier, solution to this problem is to not create an animation on the <code>::view-transition-group</code> pseudo, but to rely on CSS Transition on the original element. See <a href=\"https://brm.us/view-transitions-border-radius-revisited/\">https://brm.us/view-transitions-border-radius-revisited/</a> for the details on this.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-problem\" name=\"the-problem\">#</a> The Problem</h3>\n<p>The problem can be seen in the following demo that morphs a <code>.card</code> using a View Transition. The <code>.card</code> has a <code>view-transition-name</code> and animates its <code>border-radius</code> from <code>0.25rem</code> to <code>3rem</code> and back, amongst a few other properties that change along with it <em>(such as the <code>font-size</code> and <code>aspect-ratio</code>)</em>.</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"xxNdRRR\" data-pen-title=\"View Transitions with a Border Radius (1/3 ‚Äì Problem)\" data-user=\"bramus\" data-token=\"b45887ebc1bb9176ea0f0288fd39c886\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/xxNdRRR/b45887ebc1bb9176ea0f0288fd39c886\"><br />\n  View Transitions with a Border Radius (1/3 ‚Äì Problem)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p>Pay close attention the corners of the <code>.card</code> element as it transitions: because View Transitions fade snapshots, the <code>border-radius</code> does not nicely animate but simply fades from the old state to the new state.</p>\n<p>Note that the text inside the <code>.card</code> also has a <code>view-transition-name</code> set to it, so that it gets captured separately from the <code>.card</code> itself. This will turn out to be key later on.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-solution\" name=\"the-solution\">#</a> The <em>(partial)</em> Solution</h3>\n<p>The solution to this problem is to manipulate the <code>::view-transition-group</code> which contains the snapshots. The thing you need to do is add an extra animation the <code>::view-transition-group</code> which performs the smooth animation you want. In my case, that is an animation of the <code>border-radius</code>. Don‚Äôt forget to set the <code>overflow</code> to <code>clip</code> to make sure the snapshots don‚Äôt bleed out.</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">@keyframes adjust-border-radius {\n\tfrom {\n\t\tborder-radius: 0.25rem;\n\t}\n\tto {\n\t\tborder-radius: 3rem;\n\t}\n}\n\n::view-transition-group(card) {\n\tanimation-name: -ua-view-transition-group-anim-card, adjust-border-radius;\n\toverflow: clip;\n\tbackground: #ccc;\n}\n\n:active-view-transition-type(shrink)::view-transition-group(card) {\n\tanimation-direction: normal, reverse;\n}</code></pre>\n<p>The <code>adjust-border-radius</code> animation ‚Äì which animates the <code>border-radius</code> ‚Äì gets added to the existing <code>-ua-view-transition-group-anim-card</code> animation. The newly added animation gets reversed when the card shrinks, which is communicated from JS to CSS using <a href=\"https://developer.chrome.com/blog/view-transitions-update-io24#view-transition-types\">View Transition Types</a>.</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"zYVepym\" data-pen-title=\"View Transitions with a Border Radius (2/3 ‚Äì Workaround)\" data-user=\"bramus\" data-token=\"be1fae13476716f50339afff7ffa2a4d\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/zYVepym/be1fae13476716f50339afff7ffa2a4d\"><br />\n  View Transitions with a Border Radius (2/3 ‚Äì Workaround)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p>One of the key aspects to making this actually work, is that you have to individually capture the background part of the <code>card</code> and the content/foreground part of it. It‚Äôs only the background part that you animate.</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">.card {\n\tview-transition-name: card;\n}\n\n.card &gt; .card-content {\n\tview-transition-name: card-content;\n}</code></pre>\n<p>Check out the following visualization which, upon hovering, shows the two layers that get captured. It‚Äôs the background layer that gets animated:</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"XJJGNRN\" data-pen-title=\"Untitled\" data-user=\"bramus\" data-token=\"834e41c3983688a374374b4b5ca0282f\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/XJJGNRN/834e41c3983688a374374b4b5ca0282f\"><br />\n  Untitled</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p><em>(Another aspect is that you need to invert the easing curve, but I won‚Äôt go into details here)</em></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#dealing-with-changing-backgrounds\" name=\"dealing-with-changing-backgrounds\">#</a> Dealing with changing backgrounds</h3>\n<p>In the previous demo I cheated a bit by duplicating the <code>background-color</code> onto the group, this to cover up some inaccuracies. You can see these inaccuracies more clearly when the background-color of the <code>.card</code> also changes. Pay close attention to the corners of the following demo: you can see it‚Äôs not 100% perfect.</p>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"eYqazyB\" data-pen-title=\"View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text)\" data-user=\"bramus\" data-token=\"6abb8efe83bc983eb3776fb864b1e685\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/eYqazyB/6abb8efe83bc983eb3776fb864b1e685\"><br />\n  View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p><em>(While at it, I updated the code to also change the text inside the card)</em>.</p>\n<p>The solution here too is to move more properties that get animated onto the <code>::view-transition-group</code>. In this case, it‚Äôs the <code>background-color</code>.</p>\n<p>To actually see the background animating as part of a transition, the snapshots that make up the card (but not its contents ‚Äì which are captured separately) need to be hidden while the transition runs. This can be done by setting the <code>::view-transition-image-pair(card)</code> to <code>display: none;</code>. This can safely be done because of the fact that the text content of the card gets captured separately.</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">@keyframes adjust-group {\n\tfrom {\n\t\tbackground: #ccc;\n\t\tborder-radius: 0.25rem;\n\t}\n\tto {\n\t\tbackground: lightblue;\n\t\tborder-radius: 3rem;\n\t}\n}\n::view-transition-group(card) {\n\tanimation-name: -ua-view-transition-group-anim-card, adjust-group;\n}\n:active-view-transition-type(shrink)::view-transition-group(card) {\n\tanimation-direction: normal, reverse;\n}\n::view-transition-image-pair(card) {\n\tdisplay: none;\n}</code></pre>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"raNzaoM\" data-pen-title=\"View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text + background animation --fixed)\" data-user=\"bramus\" data-token=\"f7c581ddb1505dc92721b977a235fa2c\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/raNzaoM/f7c581ddb1505dc92721b977a235fa2c\"><br />\n  View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text + background animation &#8211;fixed)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<div class=\"note\">\n<p>If the snapshot with the foreground stuff of the element bleeds out of the snapshot with the background stuff, you also need to duplicate the <code>border-radius</code> and <code>clip</code> onto that snapshot‚Äôs <code>::view-transition-group</code>.</p>\n<p>In the future <a href=\"https://github.com/WICG/view-transitions/blob/main/nested-explainer.md\">Nested View Transition Groups</a> will solve this. This feature is <a href=\"https://chromestatus.com/feature/5162799714795520\">currently getting implemented in Chrome</a>.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#dealing-with-changing-borders\" name=\"dealing-with-changing-borders\">#</a> Dealing with changing borders</h3>\n<p>A tricky thing to incorporate in the solution is animating borders. The trickiness comes from the fact that the snapshots are taken using the <code>border-box</code>. This means that when duplicating a border onto the <code>::view-transition-group</code> you need to make sure its <code>box-sizing</code> is set to <code>border-box</code>, regardless of the <code>box-sizing</code> of the snapshotted element.</p>\n<p>With this set, you can safely duplicate the border onto the <code>::view-transition-group</code> and then animate it as part of its keyframes.</p>\n<pre><code class=\"language-css\" style=\"tab-size: 2\">@keyframes adjust-group {\n\tfrom {\n\t\tborder-radius: 0.25rem;\n\t\tbackground: #ccc;\n\t\tborder-width: 2px;\n\t}\n\tto {\n\t\tborder-radius: 3rem;\n\t\tbackground: lightblue;\n\t\tborder-width: 8px;\n\t}\n}\n::view-transition-group(card) {\n  box-sizing: border-box;\n\tborder: 2px solid black;\n\tanimation-name: -ua-view-transition-group-anim-card, adjust-group;\n}\n:active-view-transition-type(shrink)::view-transition-group(card) {\n\tanimation-direction: normal, reverse;\n}\n::view-transition-image-pair(card) {\n\tdisplay: none;\n}</code></pre>\n<p class=\"codepen\" data-height=\"400\" data-default-tab=\"result\" data-slug-hash=\"dPyzPQd\" data-pen-title=\"View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text + border)\" data-user=\"bramus\" data-token=\"191d5f4adacdf1e2226d04792de3f260\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/dPyzPQd/191d5f4adacdf1e2226d04792de3f260\"><br />\n  View Transitions with a Border Radius (2/3 ‚Äì Workaround, with random text + border)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#in-summary\" name=\"in-summary\">#</a> In Summary</h3>\n<p>To smoothly animate things like borders as part of a View Transition, you need to duplicate that animation onto the <code>::view-transition-group</code>. For best effect, have the View Transition separately capture the <em>background</em> and <em>foreground</em> of the element you‚Äôre animating. This can be done by giving each a <code>view-transition-name</code>.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#spread-the-word\" name=\"spread-the-word\">#</a> Spread the word</h3>\n<p>Feel free to reshare one of the following posts on social media to help spread the word:</p>\n<ul>\n<li><a href=\"https://bsky.app/profile/bram.us/post/3lk56ksgvtk22\">BlueSky</a></li>\n<li><a href=\"https://front-end.social/@bramus/114146305006535612\">Mastodon</a></li>\n<li><a href=\"https://x.com/bramusblog/status/1899597447791280465\">Twitter</a></li>\n</ul>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n\t<p><b>üî• Like what you see? Want to stay in the loop? Here's how:</b></p>\n\t<ul>\n            <li><a href=\"https://bsky.app/profile/bram.us\">ü¶ã Follow @bram.us on BlueSky</a></li>\n            <li><a href=\"https://bram.us/feed\">üî∏ Follow bram.us using RSS</a></li>\n\t</ul>\n\t<p>I can also be found on <a href=\"https://x.com/bramus\">ùïè Twitter</a> and <a href=\"https://front-end.social/@bramus\">üêò Mastodon</a> but only post there sporadically.</p>\n</div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/03/11/view-transitions-border-radius/feed/"
          },
          "slash:comments": {
            "#text": 1
          },
          "enclosure": {
            "@_url": "https://www.bram.us/wordpress/wp-content/uploads/2025/03/view-transitions-border-radius.mp4",
            "@_length": "210037",
            "@_type": "video/mp4"
          }
        },
        {
          "title": {
            "#text": "Place the Address Bar at the bottom in Chrome on Android"
          },
          "link": {
            "#text": "https://www.bram.us/2025/03/07/place-the-address-bar-at-the-bottom-in-chrome-on-android/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/03/07/place-the-address-bar-at-the-bottom-in-chrome-on-android/#comments"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Fri, 07 Mar 2025 12:01:33 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "chrome"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35506",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "New in Chrome 134 on Android: the ability to place the Address Bar (aka ‚ÄúOmnibox‚Äù) at the bottom. To enable it, go to Chrome‚Äôs Settings, locate and tap ‚ÄúAddress Bar‚Äù, and choose ‚ÄúBottom‚Äù."
          },
          "content:encoded": {
            "#text": "<p><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox.png\" alt=\"\" width=\"560\" height=\"365\" class=\"alignnone size-medium wp-image-35507\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox.png 3840w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox-560x365.png 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox-1120x729.png 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox-768x500.png 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox-1536x1000.png 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox-2048x1333.png 2048w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/chrome-android-bottom-omnibox-1568x1021.png 1568w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /></p>\n<p>New in Chrome 134 on Android: the ability to place the Address Bar <em>(aka ‚ÄúOmnibox‚Äù)</em> at the bottom. To enable it, go to Chrome‚Äôs Settings, locate and tap ‚ÄúAddress Bar‚Äù, and choose ‚ÄúBottom‚Äù.</p>\n<p><em>(The feature is getting rolled out as <a href=\"https://developer.chrome.com/docs/web-platform/chrome-variations\">a Chrome Variation</a>, so it could be you need to flip on a feature flag to see the option.)</em></p>\n<p>Chrome on iOS has had this for quite some time now; I‚Äôm happy to see this on Android too üôÇ</p>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/03/07/place-the-address-bar-at-the-bottom-in-chrome-on-android/feed/"
          },
          "slash:comments": {
            "#text": 1
          }
        },
        {
          "title": {
            "#text": "View Transitions Applied: Dealing with the Snapshot Containing Block"
          },
          "link": {
            "#text": "https://www.bram.us/2025/03/04/view-transitions-snapshot-containing-block/"
          },
          "comments": {
            "#text": "https://www.bram.us/2025/03/04/view-transitions-snapshot-containing-block/#respond"
          },
          "dc:creator": {
            "#text": "Bramus!"
          },
          "pubDate": {
            "#text": "Tue, 04 Mar 2025 22:17:39 +0000"
          },
          "category": [
            {
              "#text": "Original Content"
            },
            {
              "#text": "javascript"
            },
            {
              "#text": "performance"
            },
            {
              "#text": "view transitions"
            }
          ],
          "guid": {
            "#text": "https://www.bram.us/?p=35412",
            "@_isPermaLink": "false"
          },
          "description": {
            "#text": "Beware when manipulating the coordinates of the View Transition‚Äôs <code>::view-transition-group(*)</code> pseudo. Depending on where you read those coordinates from, you might end up with layout jumps when writing them back. This post details the pitfalls and how to deal with them, unlocking more performant animations on the <code>::view-transition-group()</code> pseudo along the way."
          },
          "content:encoded": {
            "#text": "<p><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/IMG_3847.jpeg\" alt=\"\" width=\"560\" height=\"315\" class=\"alignnone size-medium wp-image-35488\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/IMG_3847.jpeg 1280w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/IMG_3847-560x315.jpeg 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/IMG_3847-1120x630.jpeg 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/03/IMG_3847-768x432.jpeg 768w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /></p>\n<div class=\"intro\">\n<p>Beware when manipulating the coordinates of the View Transition‚Äôs <code>::view-transition-group(*)</code> pseudo. Depending on where you read those coordinates from, you might end up with layout jumps when writing them back. This post details the pitfalls and how to deal with them, unlocking more performant animations on the <code>::view-transition-group()</code> pseudo along the way.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n<p>üåü This post is about View Transitions. If you are not familiar with the basics of it, check out <a href=\"https://www.bram.us/2024/11/17/supercharge-web-ux-with-view-transitions-react-brussels/#recording\">this 30-min talk of mine</a> to get up to speed.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#intro\" name=\"intro\">#</a> Intro</h3>\n<p>In <a href=\"https://www.bram.us/2025/01/08/view-transitions-snippets-keeping-track-of-the-old-and-new-positions-of-a-transitioned-element/\">View Transitions Snippets: Keeping track of the old and new positions of a transitioned element</a> I shared how to get the old and new position of the <code>::view-transition-group()</code>. To read these positions I relied on doing a <code>getBoundingClientRect</code> of the element before and after the <code>updateCallback</code> was done.</p>\n<pre><code class=\"language-js\">// The subject\nconst $box = document.querySelector('.box');\n\n// Get old position and size\nconst rectBefore = $box.getBoundingClientRect();\n\n// Start a View Transition that alters the $box in some way\nconst t = document.startViewTransition(() => {\n  modify($box);\n});\n    \n// Wait for the update callback to be done\nawait t.updateCallbackDone;\n\n// Get the new position and size\nconst rectAfter = $box.getBoundingClientRect();</code></pre>\n<p>In <a href=\"https://www.bram.us/2025/02/07/view-transitions-applied-more-performant-view-transition-group-animations/\">View Transitions Applied: More performant <code>::view-transition-group(*)</code> animations</a> I used those before and after positions to create more performant keyframes by removing the <code>width</code>/<code>height</code> from the keyframes and replacing them with a <code>translate</code> which automatically got added to the <code>transform</code> defined on the <code>::view-transition-group(*)</code>.</p>\n<pre><code class=\"language-js\">const flip = [\n&#x9;&grave;${(rectBefore.left - rectAfter.left)}px ${(rectBefore.top - rectAfter.top)}px&grave;,\n&#x9;&grave;0px 0px&grave;,\n];\n\nconst flipKeyframes = {\n&#x9;translate: flip,\n&#x9;easing: &quot;ease&quot;,\n};\n\nconst boxGroupAnimation = document.getAnimations().find((anim) =&gt; {\n&#x9;return anim.effect.target === document.documentElement &amp;&amp;\n&#x9;anim.effect.pseudoElement == &apos;::view-transition-group(box)&apos;;\n});\n\nboxGroupAnimation.effect.setKeyframes(flipKeyframes);</code></pre>\n<p>While I did manage to achieve what I wanted to achieve, there was one pain point that I carefully worked my way around in all that code: the difference between the Viewport and the Snapshot Containing Block. By doing so, the solution was also limited to only working with a <code>::view-transition-group()</code> whose size did not change between the old and new snapshot state.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-problem\" name=\"the-problem\">#</a> The Problem</h3>\n<p>When View Transition Pseudos get animated their positioning happens against the Snapshot Containing Block. As I wrote before:</p>\n<blockquote>\n<p>The <a href=\"https://drafts.csswg.org/css-view-transitions-1/#snapshot-containing-block-concept\">Snapshot Containing Block</a> is a rectangle that is used to position the <code>::view-transition</code> pseudo and its descendants.</p>\n<p>This rectangle includes the address bar ‚Äì if any ‚Äì so its origin can be different from the <a href=\"https://github.com/web-platform-tests/interop-2022-viewport/blob/main/explainers/layout-viewport.md\">Layout Viewport</a>‚Äôs origin on mobile devices.</p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block.png\" alt=\"\" width=\"560\" height=\"465\" class=\"alignnone size-medium wp-image-35251\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block.png 1628w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block-560x465.png 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block-1120x930.png 1120w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block-768x638.png 768w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block-1536x1276.png 1536w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/snapshot-containing-block-1568x1302.png 1568w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /><figcaption>Illustration from the spec, showing the Snapshot Containing Block: <cite>The snapshot containing block includes the URL bar, as this can be scrolled away. The keyboard is included as this appears and disappears. The top and bottom bars are part of the OS rather than the browser, so they‚Äôre not included in the snapshot containing block.</cite></figcaption></figure>\n</blockquote>\n<p>In my previous posts I read the position of the <code>::view-transition-group()</code> pseudo using <code>getBoundingClientRect</code>, which gives you get back coordinates that are relative to the Layout Viewport.</p>\n<p>On Desktop browsers the origins of the Layout Viewport and the Snapshot Containing Block are the same, allowing you to safely read coordinates in the one space and use them in the other space.</p>\n<p>On mobile the story is different, because on mobile there <em>can</em> be a difference between both origins. Because of that difference you can‚Äôt use coordinates measured in the one space to the other. As I wrote:</p>\n<blockquote>\n<p>See the following screenshot of Chrome on Android. The box <em>(pink outline)</em> is positioned at the offset 24,24 when measured against the Viewport <em>(red outline)</em>, but that becomes 24,80 when measured against the Snapshot Containing Block <em>(blue outline)</em>.</p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/01/vt-snapshot-containing-block.png\" alt=\"\" width=\"560\" height=\"518\" class=\"alignnone size-medium wp-image-35249\" srcset=\"https://www.bram.us/wordpress/wp-content/uploads/2025/01/vt-snapshot-containing-block.png 864w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/vt-snapshot-containing-block-560x518.png 560w, https://www.bram.us/wordpress/wp-content/uploads/2025/01/vt-snapshot-containing-block-768x710.png 768w\" sizes=\"auto, (max-width: 560px) 100vw, 560px\" /><figcaption>Screenshot taken with Chrome on Android. The red outline represents the Layout Viewport. The subject is positioned at 24px from its top edge, indicated by the red arrow. The blue outline represents the Snapshot Containing Block. The subject is is positioned at 80px from its top edge, indicated by the blue arrow.</figcaption></figure>\n</blockquote>\n<p><mark>Because of this difference, it‚Äôs not safe to read coordinates of the View Transition pseudos using <code>getBoundingClientRect</code> <em>(which gives you Viewport-relative coordinates)</em> and then directly use those values in the keyframes of those pseudos <em>(which expects Snapshot Containing Block-relative coordinates)</em>.</mark></p>\n<p>See the following recording that demonstrates the issue. Because the origins of the Viewport and Snapshot Containing Block do no match <em>(on mobile)</em>, there‚Äôs a jump in position when manipulating the keyframes with coordinates there were read with <code>getBoundingClientRect</code>.</p>\n<div style=\"width: 270px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-35412-3\" width=\"270\" height=\"600\" loop autoplay muted preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/snapshot-containing-block-jump.mp4?_=3\" /><a href=\"https://www.bram.us/wordpress/wp-content/uploads/2025/03/snapshot-containing-block-jump.mp4\">https://www.bram.us/wordpress/wp-content/uploads/2025/03/snapshot-containing-block-jump.mp4</a></video></div>\n<div class=\"note\">\n<p>To be clear: there is no problem as long as you stay within the same coordinate space. For example, if you read the position of the <code>::view-transition-group(*)</code> pseudo with <code>getBoundingClientRect</code> to draw some boxes on screen with <code>position: fixed</code> everything works fine because you are staying within the same coordinate space. It is only when you cross from one coordinate space into the other that you can end up with differences.</p>\n</div>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-solution\" name=\"the-solution\">#</a> The Solution</h3>\n<p>The solution to this problem is to stay within the Snapshot Containing Block coordinate space when manipulating the keyframes of the <code>::view-transition-group()</code>. In theory you should be able to read the original values straight from the keyframes applied to the <code>::view-transition-group(*)</code>, like so:</p>\n<pre><code class=\"language-js\">// Get the keyframes\nconst boxGroupKeyframes = boxGroupAnimation.effect.getKeyframes();\n\n// Build rect to represent the old position + size\n// based off of the ‚Äúfrom‚Äù transform value\nconst oldMatrix = new DOMMatrix(boxGroupKeyframes[0].transform);\nconst rectBefore = {\n  width: boxGroupKeyframes[0].width.split('px')[0],\n  height: boxGroupKeyframes[0].height.split('px')[0],\n  left: oldMatrix.e,\n  top: oldMatrix.f,\n};\n\n// Build rect to represent the new position + size\n// based off of the ‚Äúto‚Äù transform value\n// ‚ö†Ô∏è Does not work in Chrome (see below)\nconst newMatrix = new DOMMatrix(boxGroupKeyframes[1].transform);\nconst rectAfter = {\n  width: boxGroupKeyframes[1].width.split('px')[0],\n  height: boxGroupKeyframes[1].height.split('px')[0],\n  left: newMatrix.e,\n  top: newMatrix.f,\n};</code></pre>\n<p>However, in practice that does not work in Chrome because of <a href=\"https://issues.chromium.org/issues/387030974\">crbug/387030974</a> which causes Chrome to compute an incorrect <code>to</code> keyframe. Here‚Äôs an example dump of a <code>from</code> and <code>to</code> keyframe in Chrome. All values in the <code>to</code> keyframe are initial values for those properties, instead of the actually used values. Uhoh!</p>\n<pre><code class=\"language-json\">[\n    {\n        \"offset\": 0,\n        \"easing\": \"ease\",\n        \"composite\": \"auto\",\n        \"transform\": \"matrix(1, 0, 0, 1, 24, 371.5)\",\n        \"height\": \"143px\",\n        \"backdropFilter\": \"none\",\n        \"width\": \"143px\",\n        \"computedOffset\": 0\n    },\n    {\n        \"offset\": 1,\n        \"easing\": \"ease\",\n        \"composite\": \"replace\",\n        \"transform\": \"none\",       /* ‚ö†Ô∏è Incorrect! */\n        \"height\": \"auto\",          /* ‚ö†Ô∏è Incorrect! */\n        \"backdropFilter\": \"none\",\n        \"width\": \"auto\",           /* ‚ö†Ô∏è Incorrect! */\n        \"computedOffset\": 1\n    }\n]</code></pre>\n<p>After some conversations back and forth with our wonderful team of engineers, a workaround to <a href=\"https://issues.chromium.org/issues/387030974\">crbug/387030974</a> was found: time travel.</p>\n<p><mark>I kid you not: time travel is the solution here. By advancing the time of the <code>::view-transition-group(*)</code>‚Äôs animation to its endtime, you can read the to-<code>transform</code> from it using a regular <code>getComputedStyle</code>. After having done so, simply rewind the time back to <code>0</code> so that the animation can run.</mark></p>\n<div class=\"update\" id=\"update_2025_05_28\">\n<p><strong>UPDATE 2025.05.28:</strong> This bug is fixed in Chrome 137. The code in this post has been updated to take that into account</p>\n</div>\n<p>In code that becomes:</p>\n<pre><code class=\"language-js\">let rectAfter;\n\n// Workaround for https://crbug.com/387030974\nfunction isBuggyChromium(keyframes) {\n  if (keyframes[1].transform === 'none') return true;\n  return false;\n}\n\nif (isBuggyChromium(boxGroupKeyframes)) {\n  // Advance animation to the end\n  boxGroupAnimation.currentTime = boxGroupAnimation.effect.getTiming().duration;\n\n  // Read the styles\n  const newStyles = window.getComputedStyle(document.documentElement, '::view-transition-group(box)');\n  const newMatrix = new DOMMatrix(newStyles.transform);\n\n  // Build the rectangle\n  rectAfter = {\n    width: newStyles.width.split('px')[0],\n    height: newStyles.height.split('px')[0],\n    left: newMatrix.e,\n    top: newMatrix.f,\n  };\n\n  // Rewind animation back to the start\n  boxGroupAnimation.currentTime = 0;\n} else {\n  // &lt; previous code that extracts the value from boxGroupKeyframes[1] goes here &gt;\n}</code></pre>\n<p>And just like that, you have the values, already in the Snapshot Containing Block Coordinate Space üôÇ</p>\n<p class=\"codepen\" data-height=\"490\" data-default-tab=\"result\" data-slug-hash=\"NPWrRKv\" data-pen-title=\"Debugging View Transitions: Keeping track of the old and new position, revisited\" data-user=\"bramus\" style=\"height: 490px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/NPWrRKv\"><br />\n  Debugging View Transitions: Keeping track of the old and new position, revisited</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<details>\n<summary>ü§® Hold up, how come the <code>translate</code> approach ‚Äì which uses Viewport-relative Coordinates (!) ‚Äì even work?</summary>\n<p>In <a href=\"https://www.bram.us/2025/02/07/view-transitions-applied-more-performant-view-transition-group-animations/\">View Transitions Applied: More performant <code>::view-transition-group(*)</code> animations</a> I computed some values to use for the <code>transition</code> to apply on top of the existing <code>transform</code>.</p>\n<p>Because the computed value for <code>transition</code> is only a delta between two points, it does not matter which coordinate space those original points were in. And because the <code>transform</code> is already in the Snapshot Containing Block and both properties accumulate, the end result too ended up coordinates in the Snapshot Containing Block Coordinate Space.</p>\n<p><em>(Don‚Äôt worry if you look like this right now: ü´†)</em></p>\n</details>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-solution-applied\" name=\"the-solution-applied\">#</a> The Solution, Applied</h3>\n<p>With the ability now to get Snapshot Containing Block-relative coordinates, it‚Äôs time to revisit <a href=\"https://www.bram.us/2025/02/07/view-transitions-applied-more-performant-view-transition-group-animations/\">the previous solution</a> to more performant keyframes on the <code>::view-transition-group()</code> pseudo.</p>\n<p>Instead of computing a relative <code>translate</code> to apply on top of the existing <code>transform</code>, it is now possible to directly calculate a new <code>transform</code></p>\n<p>Like so:</p>\n<pre><code class=\"language-js\">const flip = [\n&#x9;&grave;translate(${rectBefore.left}px,${rectBefore.top}px)&grave;,\n&#x9;&grave;translate(${rectAfter.left}px,${rectAfter.top}px)&grave;,\n];\n\nconst flipKeyframes = {\n&#x9;transform: flip,\n&#x9;easing: &quot;ease&quot;,\n};</code></pre>\n<p>Here‚Äôs a live demo <em>(<a href=\"https://codepen.io/bramus/debug/qEBExRG\">standalone version here</a>)</em> which works fine on both Desktop and Mobile:</p>\n<p class=\"codepen\" data-height=\"570\" data-default-tab=\"result\" data-slug-hash=\"qEBExRG\" data-pen-title=\"Better performing View Transition Animations, attempt #2, simplified (using transform)\" data-user=\"bramus\" style=\"height: 570px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/qEBExRG\"><br />\n  Better performing View Transition Animations, attempt #2, simplified (using transform)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-solution-applied-2\" name=\"the-solution-applied-2\">#</a> The Solution, Applied: Dealing with differently sized elements</h3>\n<p>Because we have found a way to directly manipulate the <code>transform</code> property of the keyframes, it‚Äôs also possible to support View Transitions in which an element has a different size in the old and new state ‚Äì something that was not possible with the <code>translate</code> approach.</p>\n<p>To achieve this, set the <code>scaleX</code> and <code>scaleY</code> transform functions to the ratio of the before value over the after value:</p>\n<pre><code class=\"language-js\">const flip = [\n  `translate(${rectBefore.left}px,${rectBefore.top}px) scaleX(${rectBefore.width / rectAfter.width}) scaleY(${rectBefore.height / rectAfter.height})`,\n  `translate(${rectAfter.left}px,${rectAfter.top}px) scaleX(1) scaleY(1)`,\n];</code></pre>\n<p>For this approach to work properly you must not forget to set the <code>transform-origin</code> on the animation (in order to prevent jumps) and to also do some sizing magic on the pseudos (to play nice with changing aspect ratios).</p>\n<pre><code class=\"language-js\">const flipKeyframes = {\n  transform: flip,\n  transformOrigin: ['0% 0%', '0% 0%'],\n  easing: \"ease\",\n};</code></pre>\n<pre><code class=\"language-css\">::view-transition-new(*),\n::view-transition-old(*) {\n  width: 100%;\n  height: 100%;\n  object-fit: fill;\n}</code></pre>\n<p>Also note that this approach detailed in this section only works when you have no extra styles set on the <code>::view-transition-group()</code>. If you, for example, have some <code>border</code> or <code>border-radius</code> set on the group, this approach here won‚Äôt work and you‚Äôll end up with weird visual results.</p>\n<p>Here‚Äôs a live demo <em>(<a href=\"https://codepen.io/bramus/debug/dPyPJzq\">standalone version here</a>)</em> that has it all put together. It too works fine on both Desktop and Mobile:</p>\n<p class=\"codepen\" data-height=\"570\" data-default-tab=\"result\" data-slug-hash=\"dPyPJzq\" data-pen-title=\"Better performing View Transition Animations, attempt #2, simplified (using transform, including scale animation)\" data-user=\"bramus\" style=\"height: 570px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bramus/pen/dPyPJzq\"><br />\n  Better performing View Transition Animations, attempt #2, simplified (using transform, including scale animation)</a> by Bramus (<a href=\"https://codepen.io/bramus\">@bramus</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://public.codepenassets.com/embed/index.js\"></script></p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<h3><a href=\"#the-future\" name=\"the-future\">#</a> Can we, like, not have to do this Coordinate Space dance?</h3>\n<p>Even if <a href=\"https://issues.chromium.org/issues/387030974\">crbug/387030974</a> got fixed, you‚Äôd still have to be wary about which coordinate space you are working in, both when reading and writing.</p>\n<p>To me, ideally, you should not have to think about this and coordinates should automatically be converted to/from Viewport-relative ones when reading/writing coordinates of the <code>::view-transition-group()</code> pseudos. I filed <a href=\"https://github.com/w3c/csswg-drafts/issues/11456\">CSS Working Group Issue #11456</a> to discuss this.</p>\n<blockquote>\n<p>I believe that the only proper solution would be to normalize the keyframes to be viewport relative whenever they are touched by authors:</p>\n<ul>\n<li><code class=\"notranslate\">groupAnimation.effect.getKeyframes</code>: Expose those coordinates as viewport relative.</li>\n<li><code class=\"notranslate\">groupAnimation.effect.setKeyframes</code>: Treat those coordinates as viewport relative.</li>\n</ul>\n<p>Internally the SCB-relative coordinates can still be used, and my suggestion is that the engine would auto-convert back and forth between the two coordinate spaces.</p>\n<p>That would allow:</p>\n<ul>\n<li><code class=\"notranslate\">groupAnimation.effect.getKeyframes()</code>: authors can now use the reported coordinates to position elements onto those locations</li>\n<li><code class=\"notranslate\">groupAnimation.effect.setKeyframes(customKeyframes)</code>: the group pseudo no longer ‚Äújumps up‚Äù by <code class=\"notranslate\">&lt;height-of-the-retractable-top-bar&gt;</code>.</li>\n<li><code class=\"notranslate\">groupAnimation.effect.setKeyframes(groupAnimation.effect.getKeyframes())</code>: this still works because the engine auto-converts in both the getter and the setter.</li>\n</ul>\n<p>The benefit to authors here is that don‚Äôt need to do anything: it just works.</p>\n</blockquote>\n<p>An alternative approach would be to expose <a href=\"https://drafts.csswg.org/css-env-1/\">an environment variable</a> that gives you the distance between the origin of the Viewport and the Snapshot Containing Block. You‚Äôd still need to take it into account, but at least you‚Äôd be able to mix and match coordinates from both spaces.</p>\n<p style=\"text-align: center; font-size: 28px; font-family: 'times new roman', times; margin: 3em 0;\">~</p>\n<div class=\"note\">\n\t<p><b>üî• Like what you see? Want to stay in the loop? Here's how:</b></p>\n\t<ul>\n            <li><a href=\"https://bsky.app/profile/bram.us\">ü¶ã Follow @bram.us on BlueSky</a></li>\n            <li><a href=\"https://bram.us/feed\">üî∏ Follow bram.us using RSS</a></li>\n\t</ul>\n\t<p>I can also be found on <a href=\"https://x.com/bramus\">ùïè Twitter</a> and <a href=\"https://front-end.social/@bramus\">üêò Mastodon</a> but only post there sporadically.</p>\n</div>\n"
          },
          "wfw:commentRss": {
            "#text": "https://www.bram.us/2025/03/04/view-transitions-snapshot-containing-block/feed/"
          },
          "slash:comments": {
            "#text": 0
          },
          "enclosure": {
            "@_url": "https://www.bram.us/wordpress/wp-content/uploads/2025/03/snapshot-containing-block-jump.mp4",
            "@_length": "878799",
            "@_type": "video/mp4"
          }
        }
      ]
    },
    "@_version": "2.0",
    "@_xmlns:content": "http://purl.org/rss/1.0/modules/content/",
    "@_xmlns:wfw": "http://wellformedweb.org/CommentAPI/",
    "@_xmlns:dc": "http://purl.org/dc/elements/1.1/",
    "@_xmlns:atom": "http://www.w3.org/2005/Atom",
    "@_xmlns:sy": "http://purl.org/rss/1.0/modules/syndication/",
    "@_xmlns:slash": "http://purl.org/rss/1.0/modules/slash/"
  }
}
